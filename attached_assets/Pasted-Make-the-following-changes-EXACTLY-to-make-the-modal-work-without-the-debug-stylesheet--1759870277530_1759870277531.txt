Make the following changes EXACTLY to make the modal work without the debug stylesheet.

/////////////////////////////////////////////////////
// 1) Remove the temporary debug CSS
/////////////////////////////////////////////////////
• Delete the file: src/debug-modal.css   (or /styles/debug-modal.css, whichever you created)
• Remove any import of that file:
  - If Vite/CRA: open src/main.tsx (or src/index.tsx) and delete:  import "./debug-modal.css";
  - If Next.js: open app/globals.css and delete the @import that referenced debug-modal.css.

/////////////////////////////////////////////////////
// 2) Overwrite the shared dialog component with a clean, permanent version
//    File: components/ui/dialog.tsx     (adjust path if yours differs)
/////////////////////////////////////////////////////

Replace the ENTIRE contents of components/ui/dialog.tsx with this:

----------------------------------------------------
"use client";

import * as React from "react";
import * as DialogPrimitive from "@radix-ui/react-dialog";
import { X } from "lucide-react";
import { cn } from "@/lib/utils";

export const Dialog = DialogPrimitive.Root;
export const DialogTrigger = DialogPrimitive.Trigger;
export const DialogClose = DialogPrimitive.Close;

// Portal mounts to <body> so no transformed parent can trap it.
export const DialogPortal = ({
  children,
  ...props
}: DialogPrimitive.DialogPortalProps) => (
  <DialogPrimitive.Portal
    {...props}
    container={typeof document !== "undefined" ? document.body : undefined}
  >
    {/* Fixed, full-viewport flex layer that centers the content */}
    <div className="fixed inset-0 z-[1000] flex items-center justify-center pointer-events-none">
      {children}
    </div>
  </DialogPrimitive.Portal>
);

export const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-[1000] bg-black/70 " +
        "data-[state=open]:animate-in data-[state=closed]:animate-out " +
        "data-[state=open]:fade-in-0 data-[state=closed]:fade-out-0",
      className
    )}
    {...props}
  />
));
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;

export const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      // Relative (not fixed) since the Portal wrapper already centers us.
      className={cn(
        "relative z-[1001] mx-4 w-full max-w-2xl pointer-events-auto " +
          "rounded-xl bg-white dark:bg-slate-900 shadow-2xl outline-none " +
          "data-[state=open]:animate-in data-[state=closed]:animate-out " +
          "data-[state=open]:fade-in-0 data-[state=closed]:fade-out-0",
        className
      )}
      {...props}
    >
      {children}

      {/* Accessible close button */}
      <DialogPrimitive.Close asChild>
        <button
          aria-label="Close dialog"
          className="absolute right-3 top-3 inline-flex h-8 w-8 items-center justify-center rounded-md border border-slate-200 bg-white text-slate-600 hover:bg-slate-50 focus:outline-none focus:ring-2 focus:ring-slate-400 dark:border-slate-700 dark:bg-slate-900 dark:text-slate-300 dark:hover:bg-slate-800"
        >
          <X className="h-4 w-4" />
        </button>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
));
DialogContent.displayName = DialogPrimitive.Content.displayName;

export const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn("flex flex-col gap-1.5 text-left", className)} {...props} />
);

export const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:gap-2",
      className
    )}
    {...props}
  />
);

export const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn("text-base font-semibold leading-none tracking-tight", className)}
    {...props}
  />
));
DialogTitle.displayName = DialogPrimitive.Title.displayName;

export const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-slate-500 dark:text-slate-400", className)}
    {...props}
  />
));
DialogDescription.displayName = DialogPrimitive.Description.displayName;
----------------------------------------------------


/////////////////////////////////////////////////////
// 3) Ensure the screen that opens the dialog is a client component
//    File: display-settings-dialog.tsx
/////////////////////////////////////////////////////

At the VERY TOP of this file, insert (or keep) exactly:
----------------------------------------------------
"use client";
----------------------------------------------------

Find your <DialogContent ...> in this file and REPLACE its className with:
----------------------------------------------------
className="relative z-[1001] max-w-2xl max-h-[85vh] overflow-hidden flex flex-col bg-white dark:bg-slate-900"
----------------------------------------------------

(Accessibility bonus: if you saw a console warning about “Missing Description or aria-describedby”, wrap your body text with <DialogDescription>…</DialogDescription> to satisfy Radix’s a11y.)


/////////////////////////////////////////////////////
// 4) Re-run your app and test the modal (embedded and pop-out)
/////////////////////////////////////////////////////

EXPECTED:
- The overlay dims the page.
- The panel appears centered, above the overlay, fully clickable.
- Works the same in both the embedded preview and the pop-out window.
