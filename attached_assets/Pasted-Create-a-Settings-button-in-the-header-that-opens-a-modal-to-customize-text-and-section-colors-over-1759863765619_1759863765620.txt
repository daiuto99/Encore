Create a Settings button in the header that opens a modal to customize text and section colors, overriding the markdown inline styles.

1. UPDATE client/src/lib/display-settings.ts:

export interface DisplaySettings {
  // Text colors
  mainTextColor: string;
  
  // Section colors - override markdown inline styles
  introColor: string;
  verseColor: string;
  chorusColor: string;
  bridgeColor: string;
  outroColor: string;
  soloColor: string;
  interludeColor: string;
  instrumentalColor: string;
  
  // Display toggles
  showChords: boolean;
  showKey: boolean;
  boldChorus: boolean;
}

export interface DisplaySettingsState {
  light: DisplaySettings;
  dark: DisplaySettings;
}

const defaultLight: DisplaySettings = {
  mainTextColor: '#1e293b', // default light mode text
  introColor: '#3B82F6',
  verseColor: '#F97316',
  chorusColor: '#EF4444',
  bridgeColor: '#8B5CF6',
  outroColor: '#F59E0B',
  soloColor: '#10B981',
  interludeColor: '#06B6D4',
  instrumentalColor: '#EC4899',
  showChords: true,
  showKey: true,
  boldChorus: false,
};

const defaultDark: DisplaySettings = {
  mainTextColor: '#f8fafc', // default dark mode text
  introColor: '#60A5FA',
  verseColor: '#FB923C',
  chorusColor: '#F87171',
  bridgeColor: '#A78BFA',
  outroColor: '#FBBF24',
  soloColor: '#34D399',
  interludeColor: '#22D3EE',
  instrumentalColor: '#F472B6',
  showChords: true,
  showKey: true,
  boldChorus: false,
};

export const defaultDisplaySettingsState: DisplaySettingsState = {
  light: defaultLight,
  dark: defaultDark
};

export function loadDisplaySettings(): DisplaySettingsState {
  try {
    const saved = localStorage.getItem('encore-display-settings');
    return saved ? JSON.parse(saved) : defaultDisplaySettingsState;
  } catch {
    return defaultDisplaySettingsState;
  }
}

export function saveDisplaySettings(settings: DisplaySettingsState): void {
  localStorage.setItem('encore-display-settings', JSON.stringify(settings));
}

export function getCurrentSettings(state: DisplaySettingsState, isDarkMode: boolean): DisplaySettings {
  return isDarkMode ? state.dark : state.light;
}

2. UPDATE shared/schema.ts:

Replace the displaySettings section with:
displaySettings: z.object({
  light: z.object({
    mainTextColor: z.string().default('#1e293b'),
    introColor: z.string().default('#3B82F6'),
    verseColor: z.string().default('#F97316'),
    chorusColor: z.string().default('#EF4444'),
    bridgeColor: z.string().default('#8B5CF6'),
    outroColor: z.string().default('#F59E0B'),
    soloColor: z.string().default('#10B981'),
    interludeColor: z.string().default('#06B6D4'),
    instrumentalColor: z.string().default('#EC4899'),
    showChords: z.boolean().default(true),
    showKey: z.boolean().default(true),
    boldChorus: z.boolean().default(false),
  }),
  dark: z.object({
    mainTextColor: z.string().default('#f8fafc'),
    introColor: z.string().default('#60A5FA'),
    verseColor: z.string().default('#FB923C'),
    chorusColor: z.string().default('#F87171'),
    bridgeColor: z.string().default('#A78BFA'),
    outroColor: z.string().default('#FBBF24'),
    soloColor: z.string().default('#34D399'),
    interludeColor: z.string().default('#22D3EE'),
    instrumentalColor: z.string().default('#F472B6'),
    showChords: z.boolean().default(true),
    showKey: z.boolean().default(true),
    boldChorus: z.boolean().default(false),
  })
}).optional()

3. UPDATE client/src/hooks/use-setlist-state.tsx:

Import:
import { loadDisplaySettings, saveDisplaySettings, type DisplaySettingsState } from '@/lib/display-settings';

Add to initialState:
displaySettings: loadDisplaySettings()

Add action:
updateDisplaySettings: (settings: DisplaySettingsState) => {
  saveDisplaySettings(settings);
  setState(prev => ({ ...prev, displaySettings: settings }));
},

4. CREATE client/src/components/setlist/display-settings-dialog.tsx:

import { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Switch } from '@/components/ui/switch';
import { Label } from '@/components/ui/label';
import { Settings, Sun, Moon } from 'lucide-react';
import { type DisplaySettingsState, type DisplaySettings } from '@/lib/display-settings';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';

interface DisplaySettingsDialogProps {
  settings: DisplaySettingsState;
  isDarkMode: boolean;
  onUpdate: (settings: DisplaySettingsState) => void;
}

export default function DisplaySettingsDialog({ settings, isDarkMode, onUpdate }: DisplaySettingsDialogProps) {
  const [mode, setMode] = useState<'light' | 'dark'>(isDarkMode ? 'dark' : 'light');
  const currentSettings = settings[mode];

  const updateSetting = (key: keyof DisplaySettings, value: any) => {
    const updated = {
      ...settings,
      [mode]: {
        ...settings[mode],
        [key]: value
      }
    };
    onUpdate(updated);
  };

  const ColorPicker = ({ label, value, onChange }: { label: string; value: string; onChange: (color: string) => void }) => (
    <div className="flex items-center justify-between py-2">
      <Label className="text-sm">{label}</Label>
      <div className="flex items-center gap-2">
        <input
          type="color"
          value={value}
          onChange={(e) => onChange(e.target.value)}
          className="w-12 h-8 rounded border cursor-pointer"
        />
        <span className="text-xs font-mono text-muted-foreground w-20">{value}</span>
      </div>
    </div>
  );

  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="outline" size="sm" style={{ height: '2em' }}>
          <Settings className="h-4 w-4 mr-1" />
          Display
        </Button>
      </DialogTrigger>
      <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
        <DialogHeader>
          <div className="flex items-center justify-between">
            <DialogTitle>Display Settings</DialogTitle>
            <div className="flex gap-2">
              <Button
                variant={mode === 'light' ? 'default' : 'outline'}
                size="sm"
                onClick={() => setMode('light')}
              >
                <Sun className="h-4 w-4 mr-1" />
                Light
              </Button>
              <Button
                variant={mode === 'dark' ? 'default' : 'outline'}
                size="sm"
                onClick={() => setMode('dark')}
              >
                <Moon className="h-4 w-4 mr-1" />
                Dark
              </Button>
            </div>
          </div>
        </DialogHeader>

        <Tabs defaultValue="colors" className="w-full">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="colors">Colors</TabsTrigger>
            <TabsTrigger value="display">Display Options</TabsTrigger>
          </TabsList>

          <TabsContent value="colors" className="space-y-4">
            <div>
              <h3 className="text-sm font-semibold mb-3">Text Colors</h3>
              <ColorPicker
                label="Main Text"
                value={currentSettings.mainTextColor}
                onChange={(color) => updateSetting('mainTextColor', color)}
              />
            </div>

            <div>
              <h3 className="text-sm font-semibold mb-3">Section Header Colors</h3>
              <ColorPicker
                label="Intro"
                value={currentSettings.introColor}
                onChange={(color) => updateSetting('introColor', color)}
              />
              <ColorPicker
                label="Verse"
                value={currentSettings.verseColor}
                onChange={(color) => updateSetting('verseColor', color)}
              />
              <ColorPicker
                label="Chorus"
                value={currentSettings.chorusColor}
                onChange={(color) => updateSetting('chorusColor', color)}
              />
              <ColorPicker
                label="Bridge"
                value={currentSettings.bridgeColor}
                onChange={(color) => updateSetting('bridgeColor', color)}
              />
              <ColorPicker
                label="Outro"
                value={currentSettings.outroColor}
                onChange={(color) => updateSetting('outroColor', color)}
              />
              <ColorPicker
                label="Solo"
                value={currentSettings.soloColor}
                onChange={(color) => updateSetting('soloColor', color)}
              />
              <ColorPicker
                label="Interlude"
                value={currentSettings.interludeColor}
                onChange={(color) => updateSetting('interludeColor', color)}
              />
              <ColorPicker
                label="Instrumental"
                value={currentSettings.instrumentalColor}
                onChange={(color) => updateSetting('instrumentalColor', color)}
              />
            </div>
          </TabsContent>

          <TabsContent value="display" className="space-y-4">
            <div className="flex items-center justify-between py-3">
              <Label htmlFor="show-chords">Show Chords</Label>
              <Switch
                id="show-chords"
                checked={currentSettings.showChords}
                onCheckedChange={(checked) => updateSetting('showChords', checked)}
              />
            </div>

            <div className="flex items-center justify-between py-3">
              <Label htmlFor="show-key">Show Key Info</Label>
              <Switch
                id="show-key"
                checked={currentSettings.showKey}
                onCheckedChange={(checked) => updateSetting('showKey', checked)}
              />
            </div>

            <div className="flex items-center justify-between py-3">
              <Label htmlFor="bold-chorus">Bold Chorus Sections</Label>
              <Switch
                id="bold-chorus"
                checked={currentSettings.boldChorus}
                onCheckedChange={(checked) => updateSetting('boldChorus', checked)}
              />
            </div>
          </TabsContent>
        </Tabs>
      </DialogContent>
    </Dialog>
  );
}

5. UPDATE client/src/lib/markdown-parser.ts:

export function parseMarkdown(content: string, settings?: DisplaySettings): string {
  if (!content) return '';
  
  const s = settings || {
    mainTextColor: '#1e293b',
    introColor: '#3B82F6',
    verseColor: '#F97316',
    chorusColor: '#EF4444',
    bridgeColor: '#8B5CF6',
    outroColor: '#F59E0B',
    soloColor: '#10B981',
    interludeColor: '#06B6D4',
    instrumentalColor: '#EC4899',
    showChords: true,
    showKey: true,
    boldChorus: false,
  };
  
  let normalized = content
    .replace(/\r\n/g, '\n')
    .replace(/\r/g, '\n');
  
  // Hide key if setting is off
  if (!s.showKey) {
    normalized = normalized.replace(/^\*\*Key:\*\* .+$/gm, '');
  }
  
  // Override section colors with settings
  normalized = normalized
    .replace(/<span style="[^"]*">(##\s*Intro[^<]*)<\/span>/gi, `<span style="color: ${s.introColor}; font-weight: bold;">$1</span>`)
    .replace(/<span style="[^"]*">(##\s*Verse[^<]*)<\/span>/gi, `<span style="color: ${s.verseColor}; font-weight: bold;">$1</span>`)
    .replace(/<span style="[^"]*">(##\s*Chorus[^<]*)<\/span>/gi, `<span style="color: ${s.chorusColor}; font-weight: bold;">$1</span>`)
    .replace(/<span style="[^"]*">(##\s*Bridge[^<]*)<\/span>/gi, `<span style="color: ${s.bridgeColor}; font-weight: bold;">$1</span>`)
    .replace(/<span style="[^"]*">(##\s*Outro[^<]*)<\/span>/gi, `<span style="color: ${s.outroColor}; font-weight: bold;">$1</span>`)
    .replace(/<span style="[^"]*">(##\s*Solo[^<]*)<\/span>/gi, `<span style="color: ${s.soloColor}; font-weight: bold;">$1</span>`)
    .replace(/<span style="[^"]*">(##\s*Interlude[^<]*)<\/span>/gi, `<span style="color: ${s.interludeColor}; font-weight: bold;">$1</span>`)
    .replace(/<span style="[^"]*">(##\s*Instrumental[^<]*)<\/span>/gi, `<span style="color: ${s.instrumentalColor}; font-weight: bold;">$1</span>`);
  
  // Hide chords if disabled
  if (!s.showChords) {
    normalized = normalized.replace(/`\[[^\]]+\]`/g, '');
  }
  
  // Bold chorus if enabled
  if (s.boldChorus) {
    normalized = normalized.replace(/(##\s*Chorus[\s\S]*?)(?=##|$)/gi, '<strong>$1</strong>');
  }
  
  let html = normalized
    .replace(/^### (.+)$/gm, '<h3 class="text-lg font-semibold mb-2 mt-4">$1</h3>')
    .replace(/^## (.+)$/gm, '<h2 class="text-xl font-bold mb-3 mt-6">$1</h2>')
    .replace(/^# (.+)$/gm, '<h1 class="text-2xl font-bold mb-4 mt-6">$1</h1>')
    .replace(/\*\*([^*]+)\*\*/g, '<strong class="font-semibold">$1</strong>')
    .replace(/(?<!\*)\*([^*\n]+)\*(?!\*)/g, '<em class="italic">$1</em>')
    .replace(/`([^`\n]+)`/g, '<code class="bg-muted px-1 py-0.5 rounded text-sm font-mono">$1</code>')
    .replace(/\{harmony-high\}([\s\S]*?)\{\/harmony-high\}/g, '<span class="harmony-high">$1</span>')
    .replace(/\{harmony-low\}([\s\S]*?)\{\/harmony-low\}/g, '<span class="harmony-low">$1</span>')
    .replace(/\{harmony\}([\s\S]*?)\{\/harmony\}/g, '<span class="harmony-highlight">$1</span>')
    .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank" rel="noopener noreferrer" class="text-primary hover:underline">$1</a>')
    .replace(/\n\n+/g, '</p><p class="mb-4">')
    .replace(/\n/g, '<br>')
    .replace(/^(?!<[h1-6])/gm, '<p class="mb-4">')
    .replace(/<p class="mb-4"><\/p>/g, '')
    .replace(/<p class="mb-4">(<h[1-6])/g, '$1')
    .replace(/(<\/h[1-6]>)<\/p>/g, '$1');
  
  // Apply main text color to all paragraph text
  html = html.replace(/<p class="mb-4">/g, `<p class="mb-4" style="color: ${s.mainTextColor};">`);
  
  return html;
}

6. UPDATE client/src/pages/setlist-builder.tsx:

Import at top:
import DisplaySettingsDialog from '@/components/setlist/display-settings-dialog';
import { defaultDisplaySettingsState } from '@/lib/display-settings';

Add button in header controls (after dark mode toggle, around line 170):
<DisplaySettingsDialog
  settings={state.displaySettings || defaultDisplaySettingsState}
  isDarkMode={state.isDarkMode}
  onUpdate={actions.updateDisplaySettings}
/>

REMOVE the 3-column grid change - keep it as lg:grid-cols-2 for Folder Library and Add Songs only.

7. UPDATE client/src/components/setlist/song-viewer.tsx:

Import:
import { getCurrentSettings } from '@/lib/display-settings';
import { defaultDisplaySettingsState } from '@/lib/display-settings';

Update renderSongContent:
const renderSongContent = () => {
  if (!currentSong) return '';
  
  let processedContent = currentSong.content;
  
  if (showHighHarmony) {
    processedContent = processedContent.replace(/\{harmony-high\}([\s\S]*?)\{\/harmony-high\}/g, '<span class="harmony-high">$1</span>');
  } else {
    processedContent = processedContent.replace(/\{harmony-high\}([\s\S]*?)\{\/harmony-high\}/g, '$1');
  }
  
  if (showLowHarmony) {
    processedContent = processedContent.replace(/\{harmony-low\}([\s\S]*?)\{\/harmony-low\}/g, '<span class="harmony-low">$1</span>');
  } else {
    processedContent = processedContent.replace(/\{harmony-low\}([\s\S]*?)\{\/harmony-low\}/g, '$1');
  }
  
  processedContent = processedContent.replace(/\{harmony\}([\s\S]*?)\{\/harmony\}/g, '<span class="harmony-highlight">$1</span>');
  
  const currentDisplaySettings = getCurrentSettings(
    state.displaySettings || defaultDisplaySettingsState,
    state.isDarkMode
  );
  
  return parseMarkdown(processedContent, currentDisplaySettings);
};

This creates a Settings button in the header that opens a modal with color pickers for every section type and main text, with separate light/dark mode settings.